// Generated by Dagger (https://dagger.dev).
package com.coderus.codingchallenge.dagger;

import com.coderus.codingchallenge.repository.IRepository;
import com.coderus.codingchallenge.room.AppDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class Module_ProvideRepositoryFactory implements Factory<IRepository> {
  private final Provider<AppDatabase> dbProvider;

  public Module_ProvideRepositoryFactory(Provider<AppDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public IRepository get() {
    return provideRepository(dbProvider.get());
  }

  public static Module_ProvideRepositoryFactory create(Provider<AppDatabase> dbProvider) {
    return new Module_ProvideRepositoryFactory(dbProvider);
  }

  public static IRepository provideRepository(AppDatabase db) {
    return Preconditions.checkNotNullFromProvides(Module.INSTANCE.provideRepository(db));
  }
}
